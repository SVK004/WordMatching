{
  "version": 3,
  "sources": ["../../@pixi/events/src/EventTicker.ts", "../../@pixi/events/src/FederatedEvent.ts", "../../@pixi/events/src/FederatedMouseEvent.ts", "../../@pixi/events/src/FederatedPointerEvent.ts", "../../@pixi/events/src/FederatedWheelEvent.ts", "../../@pixi/events/src/EventBoundary.ts", "../../@pixi/events/src/EventSystem.ts", "../../@pixi/events/src/FederatedEventTarget.ts"],
  "sourcesContent": ["import { Ticker, UPDATE_PRIORITY } from '@pixi/core';\n\nimport type { EventSystem } from './EventSystem';\n\n/**\n * This class handles automatic firing of PointerEvents\n * in the case where the pointer is stationary for too long.\n * This is to ensure that hit-tests are still run on moving objects.\n * @memberof PIXI\n * @since 7.2.0\n * @see PIXI.EventsTicker\n */\nclass EventsTickerClass\n{\n    /** The event system. */\n    public events: EventSystem;\n    /** The DOM element to listen to events on. */\n    public domElement: HTMLElement;\n    /** The frequency that fake events will be fired. */\n    public interactionFrequency = 10;\n\n    private _deltaTime = 0;\n    private _didMove = false;\n    private tickerAdded = false;\n    private _pauseUpdate = true;\n\n    /**\n     * Initializes the event ticker.\n     * @param events - The event system.\n     */\n    public init(events: EventSystem): void\n    {\n        this.removeTickerListener();\n        this.events = events;\n        this.interactionFrequency = 10;\n        this._deltaTime = 0;\n        this._didMove = false;\n        this.tickerAdded = false;\n        this._pauseUpdate = true;\n    }\n\n    /** Whether to pause the update checks or not. */\n    get pauseUpdate(): boolean\n    {\n        return this._pauseUpdate;\n    }\n\n    set pauseUpdate(paused: boolean)\n    {\n        this._pauseUpdate = paused;\n    }\n\n    /** Adds the ticker listener. */\n    public addTickerListener(): void\n    {\n        if (this.tickerAdded || !this.domElement)\n        {\n            return;\n        }\n\n        Ticker.system.add(this.tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n\n        this.tickerAdded = true;\n    }\n\n    /** Removes the ticker listener. */\n    public removeTickerListener(): void\n    {\n        if (!this.tickerAdded)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this.tickerUpdate, this);\n\n        this.tickerAdded = false;\n    }\n\n    /** Sets flag to not fire extra events when the user has already moved there mouse */\n    public pointerMoved(): void\n    {\n        this._didMove = true;\n    }\n\n    /** Updates the state of interactive objects. */\n    private update(): void\n    {\n        if (!this.domElement || this._pauseUpdate)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this._didMove)\n        {\n            this._didMove = false;\n\n            return;\n        }\n\n        // eslint-disable-next-line dot-notation\n        const rootPointerEvent = this.events['rootPointerEvent'];\n\n        if (this.events.supportsTouchEvents && (rootPointerEvent as PointerEvent).pointerType === 'touch')\n        {\n            return;\n        }\n\n        globalThis.document.dispatchEvent(new PointerEvent('pointermove', {\n            clientX: rootPointerEvent.clientX,\n            clientY: rootPointerEvent.clientY,\n        }));\n    }\n\n    /**\n     * Updates the state of interactive objects if at least {@link PIXI.EventsTicker#interactionFrequency}\n     * milliseconds have passed since the last invocation.\n     *\n     * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n     * @param deltaTime - time delta since the last call\n     */\n    private tickerUpdate(deltaTime: number): void\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        this.update();\n    }\n}\n\n/**\n * This class handles automatic firing of PointerEvents\n * in the case where the pointer is stationary for too long.\n * This is to ensure that hit-tests are still run on moving objects.\n * @memberof PIXI\n * @type {PIXI.EventsTickerClass}\n * @since 7.2.0\n */\nexport const EventsTicker = new EventsTickerClass();\n", "import { Point } from '@pixi/core';\n\nimport type { EventBoundary } from './EventBoundary';\nimport type { FederatedEventTarget } from './FederatedEventTarget';\n\nexport interface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n    type: string;\n}\n\n/**\n * An DOM-compatible synthetic event implementation that is \"forwarded\" on behalf of an original\n * FederatedEvent or native {@link https://dom.spec.whatwg.org/#event Event}.\n * @memberof PIXI\n * @typeParam N - The type of native event held.\n */\nexport class FederatedEvent<N extends UIEvent | PixiTouch = UIEvent | PixiTouch> implements UIEvent\n{\n    /** Flags whether this event bubbles. This will take effect only if it is set before propagation. */\n    public bubbles = true;\n\n    /** @deprecated since 7.0.0 */\n    public cancelBubble = true;\n\n    /**\n     * Flags whether this event can be canceled using {@link PIXI.FederatedEvent.preventDefault}. This is always\n     * false (for now).\n     */\n    public readonly cancelable = false;\n\n    /**\n     * Flag added for compatibility with DOM {@code Event}. It is not used in the Federated Events\n     * API.\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n    public readonly composed = false;\n\n    /** The listeners of the event target that are being notified. */\n    public currentTarget: FederatedEventTarget;\n\n    /** Flags whether the default response of the user agent was prevent through this event. */\n    public defaultPrevented = false;\n\n    /**\n     * The propagation phase.\n     * @default {@link PIXI.FederatedEvent.NONE}\n     */\n    public eventPhase = FederatedEvent.prototype.NONE;\n\n    /** Flags whether this is a user-trusted event */\n    public isTrusted: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public returnValue: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public srcElement: EventTarget;\n\n    /** The event target that this will be dispatched to. */\n    public target: FederatedEventTarget;\n\n    /** The timestamp of when the event was created. */\n    public timeStamp: number;\n\n    /** The type of event, e.g. {@code \"mouseup\"}. */\n    public type: string;\n\n    /** The native event that caused the foremost original event. */\n    public nativeEvent: N;\n\n    /** The original event that caused this event, if any. */\n    public originalEvent: FederatedEvent<N>;\n\n    /** Flags whether propagation was stopped. */\n    public propagationStopped = false;\n\n    /** Flags whether propagation was immediately stopped. */\n    public propagationImmediatelyStopped = false;\n\n    /** The composed path of the event's propagation. The {@code target} is at the end. */\n    public path: FederatedEventTarget[];\n\n    /** The {@link PIXI.EventBoundary} that manages this event. Null for root events. */\n    public readonly manager: EventBoundary;\n\n    /** Event-specific detail */\n    public detail: number;\n\n    /** The global Window object. */\n    public view: WindowProxy;\n\n    /**\n     * Not supported.\n     * @deprecated since 7.0.0\n     */\n    public which: number;\n\n    /** The coordinates of the evnet relative to the nearest DOM layer. This is a non-standard property. */\n    public layer: Point = new Point();\n\n    /** @readonly */\n    get layerX(): number { return this.layer.x; }\n\n    /** @readonly */\n    get layerY(): number { return this.layer.y; }\n\n    /** The coordinates of the event relative to the DOM document. This is a non-standard property. */\n    public page: Point = new Point();\n\n    /** @readonly */\n    get pageX(): number { return this.page.x; }\n\n    /** @readonly */\n    get pageY(): number { return this.page.y; }\n\n    /**\n     * @param manager - The event boundary which manages this event. Propagation can only occur\n     *  within the boundary's jurisdiction.\n     */\n    constructor(manager: EventBoundary)\n    {\n        this.manager = manager;\n    }\n\n    /**\n     * Fallback for the deprecated @code{PIXI.InteractionEvent.data}.\n     * @deprecated since 7.0.0\n     */\n    get data(): this\n    {\n        return this;\n    }\n\n    /** The propagation path for this event. Alias for {@link PIXI.EventBoundary.propagationPath}. */\n    composedPath(): FederatedEventTarget[]\n    {\n        // Find the propagation path if it isn't cached or if the target has changed since since\n        // the last evaluation.\n        if (this.manager && (!this.path || this.path[this.path.length - 1] !== this.target))\n        {\n            this.path = this.target ? this.manager.propagationPath(this.target) : [];\n        }\n\n        return this.path;\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code Event}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _type\n     * @param _bubbles\n     * @param _cancelable\n     */\n    initEvent(_type: string, _bubbles?: boolean, _cancelable?: boolean): void\n    {\n        throw new Error('initEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code UIEvent}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _typeArg\n     * @param _bubblesArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     */\n    initUIEvent(_typeArg: string, _bubblesArg?: boolean, _cancelableArg?: boolean, _viewArg?: Window | null,\n        _detailArg?: number): void\n    {\n        throw new Error('initUIEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /** Prevent default behavior of PixiJS and the user agent. */\n    preventDefault(): void\n    {\n        if (this.nativeEvent instanceof Event && this.nativeEvent.cancelable)\n        {\n            this.nativeEvent.preventDefault();\n        }\n\n        this.defaultPrevented = true;\n    }\n\n    /**\n     * Stop this event from propagating to any addition listeners, including on the\n     * {@link PIXI.FederatedEventTarget.currentTarget currentTarget} and also the following\n     * event targets on the propagation path.\n     */\n    stopImmediatePropagation(): void\n    {\n        this.propagationImmediatelyStopped = true;\n    }\n\n    /**\n     * Stop this event from propagating to the next {@link PIXI.FederatedEventTarget}. The rest of the listeners\n     * on the {@link PIXI.FederatedEventTarget.currentTarget currentTarget} will still be notified.\n     */\n    stopPropagation(): void\n    {\n        this.propagationStopped = true;\n    }\n\n    readonly NONE = 0;\n    readonly CAPTURING_PHASE = 1;\n    readonly AT_TARGET = 2;\n    readonly BUBBLING_PHASE = 3;\n}\n", "import { Point } from '@pixi/core';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { IPointData } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { PixiTouch } from './FederatedEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for mouse events.\n * @memberof PIXI\n */\nexport class FederatedMouseEvent extends FederatedEvent<\nMouseEvent | PointerEvent | PixiTouch\n> implements MouseEvent\n{\n    /** Whether the \"alt\" key was pressed when this mouse event occurred. */\n    altKey: boolean;\n\n    /** The specific button that was pressed in this mouse event. */\n    button: number;\n\n    /** The button depressed when this event occurred. */\n    buttons: number;\n\n    /** Whether the \"control\" key was pressed when this mouse event occurred. */\n    ctrlKey: boolean;\n\n    /** Whether the \"meta\" key was pressed when this mouse event occurred. */\n    metaKey: boolean;\n\n    /** This is currently not implemented in the Federated Events API. */\n    relatedTarget: EventTarget;\n\n    /** Whether the \"shift\" key was pressed when this mouse event occurred. */\n    shiftKey: boolean;\n\n    /** The coordinates of the mouse event relative to the canvas. */\n    public client: Point = new Point();\n\n    /** @readonly */\n    public get clientX(): number { return this.client.x; }\n\n    /** @readonly */\n    public get clientY(): number { return this.client.y; }\n\n    /**\n     * Alias for {@link PIXI.FederatedMouseEvent.clientX this.clientX}.\n     * @readonly\n     */\n    get x(): number { return this.clientX; }\n\n    /**\n     * Alias for {@link PIXI.FederatedMouseEvent.clientY this.clientY}.\n     * @readonly\n     */\n    get y(): number { return this.clientY; }\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    /** The movement in this pointer relative to the last `mousemove` event. */\n    public movement: Point = new Point();\n\n    /** @readonly */\n    get movementX(): number { return this.movement.x; }\n\n    /** @readonly */\n    get movementY(): number { return this.movement.y; }\n\n    /**\n     * The offset of the pointer coordinates w.r.t. target DisplayObject in world space. This is\n     * not supported at the moment.\n     */\n    public offset: Point = new Point();\n\n    /** @readonly */\n    get offsetX(): number { return this.offset.x; }\n\n    /** @readonly */\n    get offsetY(): number { return this.offset.y; }\n\n    /** The pointer coordinates in world space. */\n    public global: Point = new Point();\n\n    /** @readonly */\n    get globalX(): number { return this.global.x; }\n\n    /** @readonly */\n    get globalY(): number { return this.global.y; }\n\n    /**\n     * The pointer coordinates in the renderer's {@link PIXI.Renderer.screen screen}. This has slightly\n     * different semantics than native PointerEvent screenX/screenY.\n     */\n    public screen: Point = new Point();\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.x}.\n     * @readonly\n     */\n    get screenX(): number { return this.screen.x; }\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.y}.\n     * @readonly\n     */\n    get screenY(): number { return this.screen.y; }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param {PIXI.IPointData} point - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PIXI.IPointData} globalPos - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @returns - A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    public getLocalPosition<P extends IPointData = Point>(displayObject: DisplayObject, point?: P, globalPos?: IPointData): P\n    {\n        return displayObject.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }\n\n    /**\n     * Whether the modifier key was pressed when this event natively occurred.\n     * @param key - The modifier key.\n     */\n    getModifierState(key: string): boolean\n    {\n        return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }\n\n    /**\n     * Not supported.\n     * @param _typeArg\n     * @param _canBubbleArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     * @param _screenXArg\n     * @param _screenYArg\n     * @param _clientXArg\n     * @param _clientYArg\n     * @param _ctrlKeyArg\n     * @param _altKeyArg\n     * @param _shiftKeyArg\n     * @param _metaKeyArg\n     * @param _buttonArg\n     * @param _relatedTargetArg\n     * @deprecated since 7.0.0\n     */\n    // eslint-disable-next-line max-params\n    initMouseEvent(\n        _typeArg: string,\n        _canBubbleArg: boolean,\n        _cancelableArg: boolean,\n        _viewArg: Window,\n        _detailArg: number,\n        _screenXArg: number,\n        _screenYArg: number,\n        _clientXArg: number,\n        _clientYArg: number,\n        _ctrlKeyArg: boolean,\n        _altKeyArg: boolean,\n        _shiftKeyArg: boolean,\n        _metaKeyArg: boolean,\n        _buttonArg: number,\n        _relatedTargetArg: EventTarget\n    ): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n", "import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for pointer events.\n * @memberof PIXI\n */\nexport class FederatedPointerEvent extends FederatedMouseEvent implements PointerEvent\n{\n    /**\n     * The unique identifier of the pointer.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId}\n     */\n    public pointerId: number;\n\n    /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     */\n    public width = 0;\n\n    /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     */\n    public height = 0;\n\n    /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     */\n    public isPrimary = false;\n\n    /**\n     * The type of pointer that triggered the event.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    public pointerType: string;\n\n    /**\n     * Pressure applied by the pointing device during the event.\n     *s\n     * A Touch's force property will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    public pressure: number;\n\n    /**\n     * Barrel pressure on a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public tangentialPressure: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     */\n    public tiltX: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     */\n    public tiltY: number;\n\n    /**\n     * Twist of a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public twist: number;\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    // Only included for completeness for now\n    getCoalescedEvents(): PointerEvent[]\n    {\n        if (this.type === 'pointermove' || this.type === 'mousemove' || this.type === 'touchmove')\n        {\n            return [this];\n        }\n\n        return [];\n    }\n\n    // Only included for completeness for now\n    getPredictedEvents(): PointerEvent[]\n    {\n        throw new Error('getPredictedEvents is not supported!');\n    }\n}\n", "import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for wheel events.\n * @memberof PIXI\n */\nexport class FederatedWheelEvent extends FederatedMouseEvent implements WheelEvent\n{\n    /**\n     * The units of `deltaX`, `deltaY`, and `deltaZ`. This is one of `DOM_DELTA_LINE`,\n     * `DOM_DELTA_PAGE`, `DOM_DELTA_PIXEL`.\n     */\n    deltaMode: number;\n\n    /** Horizontal scroll amount */\n    deltaX: number;\n\n    /** Vertical scroll amount */\n    deltaY: number;\n\n    /** z-axis scroll amount. */\n    deltaZ: number;\n\n    /** Units specified in pixels. */\n    static readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in pixels. */\n    readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in lines. */\n    static readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in lines. */\n    readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in pages. */\n    static readonly DOM_DELTA_PAGE = 2;\n\n    /** Units specified in pages. */\n    readonly DOM_DELTA_PAGE = 2;\n}\n", "import { Point, utils } from '@pixi/core';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedMouseEvent } from './FederatedMouseEvent';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { EmitterListeners, TrackingData } from './EventBoundaryTypes';\nimport type { FederatedEvent } from './FederatedEvent';\nimport type {\n    Cursor, EventMode, FederatedEventHandler,\n    FederatedEventTarget,\n    IFederatedDisplayObject\n} from './FederatedEventTarget';\n\n// The maximum iterations used in propagation. This prevent infinite loops.\nconst PROPAGATION_LIMIT = 2048;\n\nconst tempHitLocation = new Point();\nconst tempLocalMapping = new Point();\n\n/**\n * Event boundaries are \"barriers\" where events coming from an upstream scene are modified before downstream propagation.\n *\n * ## Root event boundary\n *\n * The {@link PIXI.EventSystem#rootBoundary rootBoundary} handles events coming from the &lt;canvas /&gt;.\n * {@link PIXI.EventSystem} handles the normalization from native {@link https://dom.spec.whatwg.org/#event Events}\n * into {@link PIXI.FederatedEvent FederatedEvents}. The rootBoundary then does the hit-testing and event dispatch\n * for the upstream normalized event.\n *\n * ## Additional event boundaries\n *\n * An additional event boundary may be desired within an application's scene graph. For example, if a portion of the scene is\n * is flat with many children at one level - a spatial hash maybe needed to accelerate hit testing. In this scenario, the\n * container can be detached from the scene and glued using a custom event boundary.\n *\n * ```ts\n * import { Container } from '@pixi/display';\n * import { EventBoundary } from '@pixi/events';\n * import { SpatialHash } from 'pixi-spatial-hash';\n *\n * class HashedHitTestingEventBoundary\n * {\n *     private spatialHash: SpatialHash;\n *\n *     constructor(scene: Container, spatialHash: SpatialHash)\n *     {\n *         super(scene);\n *         this.spatialHash = spatialHash;\n *     }\n *\n *     hitTestRecursive(...)\n *     {\n *         // TODO: If target === this.rootTarget, then use spatial hash to get a\n *         // list of possible children that match the given (x,y) coordinates.\n *     }\n * }\n *\n * class VastScene extends DisplayObject\n * {\n *     protected eventBoundary: EventBoundary;\n *     protected scene: Container;\n *     protected spatialHash: SpatialHash;\n *\n *     constructor()\n *     {\n *         this.scene = new Container();\n *         this.spatialHash = new SpatialHash();\n *         this.eventBoundary = new HashedHitTestingEventBoundary(this.scene, this.spatialHash);\n *\n *         // Populate this.scene with a ton of children, while updating this.spatialHash\n *     }\n * }\n * ```\n * @memberof PIXI\n */\nexport class EventBoundary\n{\n    /**\n     * The root event-target residing below the event boundary.\n     *\n     * All events are dispatched trickling down and bubbling up to this `rootTarget`.\n     */\n    public rootTarget: DisplayObject;\n\n    /**\n     * Emits events after they were dispatched into the scene graph.\n     *\n     * This can be used for global events listening, regardless of the scene graph being used. It should\n     * not be used by interactive libraries for normal use.\n     *\n     * Special events that do not bubble all the way to the root target are not emitted from here,\n     * e.g. pointerenter, pointerleave, click.\n     */\n    public dispatch: utils.EventEmitter = new utils.EventEmitter();\n\n    /** The cursor preferred by the event targets underneath this boundary. */\n    public cursor: Cursor | string;\n\n    /**\n     * This flag would emit `pointermove`, `touchmove`, and `mousemove` events on all DisplayObjects.\n     *\n     * The `moveOnAll` semantics mirror those of earlier versions of PixiJS. This was disabled in favor of\n     * the Pointer Event API's approach.\n     */\n    public moveOnAll = false;\n\n    /** Enables the global move events. `globalpointermove`, `globaltouchmove`, and `globalmousemove` */\n    public enableGlobalMoveEvents = true;\n\n    /**\n     * Maps event types to forwarding handles for them.\n     *\n     * {@link PIXI.EventBoundary EventBoundary} provides mapping for \"pointerdown\", \"pointermove\",\n     * \"pointerout\", \"pointerleave\", \"pointerover\", \"pointerup\", and \"pointerupoutside\" by default.\n     * @see PIXI.EventBoundary#addEventMapping\n     */\n    protected mappingTable: Record<string, Array<{\n        fn: (e: FederatedEvent) => void,\n        priority: number\n    }>>;\n\n    /**\n     * State object for mapping methods.\n     * @see PIXI.EventBoundary#trackingData\n     */\n    protected mappingState: Record<string, any> = {\n        trackingData: {}\n    };\n\n    /**\n     * The event pool maps event constructors to an free pool of instances of those specific events.\n     * @see PIXI.EventBoundary#allocateEvent\n     * @see PIXI.EventBoundary#freeEvent\n     */\n    protected eventPool: Map<typeof FederatedEvent, FederatedEvent[]> = new Map();\n\n    /** Every interactive element gathered from the scene. Only used in `pointermove` */\n    private _allInteractiveElements: FederatedEventTarget[] = [];\n    /** Every element that passed the hit test. Only used in `pointermove` */\n    private _hitElements: FederatedEventTarget[] = [];\n    /** Whether or not to collect all the interactive elements from the scene. Enabled in `pointermove` */\n    private _isPointerMoveEvent = false;\n\n    /**\n     * @param rootTarget - The holder of the event boundary.\n     */\n    constructor(rootTarget?: DisplayObject)\n    {\n        this.rootTarget = rootTarget;\n\n        this.hitPruneFn = this.hitPruneFn.bind(this);\n        this.hitTestFn = this.hitTestFn.bind(this);\n        this.mapPointerDown = this.mapPointerDown.bind(this);\n        this.mapPointerMove = this.mapPointerMove.bind(this);\n        this.mapPointerOut = this.mapPointerOut.bind(this);\n        this.mapPointerOver = this.mapPointerOver.bind(this);\n        this.mapPointerUp = this.mapPointerUp.bind(this);\n        this.mapPointerUpOutside = this.mapPointerUpOutside.bind(this);\n        this.mapWheel = this.mapWheel.bind(this);\n\n        this.mappingTable = {};\n        this.addEventMapping('pointerdown', this.mapPointerDown);\n        this.addEventMapping('pointermove', this.mapPointerMove);\n        this.addEventMapping('pointerout', this.mapPointerOut);\n        this.addEventMapping('pointerleave', this.mapPointerOut);\n        this.addEventMapping('pointerover', this.mapPointerOver);\n        this.addEventMapping('pointerup', this.mapPointerUp);\n        this.addEventMapping('pointerupoutside', this.mapPointerUpOutside);\n        this.addEventMapping('wheel', this.mapWheel);\n    }\n\n    /**\n     * Adds an event mapping for the event `type` handled by `fn`.\n     *\n     * Event mappings can be used to implement additional or custom events. They take an event\n     * coming from the upstream scene (or directly from the {@link PIXI.EventSystem}) and dispatch new downstream events\n     * generally trickling down and bubbling up to {@link PIXI.EventBoundary.rootTarget this.rootTarget}.\n     *\n     * To modify the semantics of existing events, the built-in mapping methods of EventBoundary should be overridden\n     * instead.\n     * @param type - The type of upstream event to map.\n     * @param fn - The mapping method. The context of this function must be bound manually, if desired.\n     */\n    public addEventMapping(type: string, fn: (e: FederatedEvent) => void): void\n    {\n        if (!this.mappingTable[type])\n        {\n            this.mappingTable[type] = [];\n        }\n\n        this.mappingTable[type].push({\n            fn,\n            priority: 0,\n        });\n        this.mappingTable[type].sort((a, b) => a.priority - b.priority);\n    }\n\n    /**\n     * Dispatches the given event\n     * @param e\n     * @param type\n     */\n    public dispatchEvent(e: FederatedEvent, type?: string): void\n    {\n        e.propagationStopped = false;\n        e.propagationImmediatelyStopped = false;\n\n        this.propagate(e, type);\n        this.dispatch.emit(type || e.type, e);\n    }\n\n    /**\n     * Maps the given upstream event through the event boundary and propagates it downstream.\n     * @param e\n     */\n    public mapEvent(e: FederatedEvent): void\n    {\n        if (!this.rootTarget)\n        {\n            return;\n        }\n\n        const mappers = this.mappingTable[e.type];\n\n        if (mappers)\n        {\n            for (let i = 0, j = mappers.length; i < j; i++)\n            {\n                mappers[i].fn(e);\n            }\n        }\n        else\n        {\n            console.warn(`[EventBoundary]: Event mapping not defined for ${e.type}`);\n        }\n    }\n\n    /**\n     * Finds the DisplayObject that is the target of a event at the given coordinates.\n     *\n     * The passed (x,y) coordinates are in the world space above this event boundary.\n     * @param x\n     * @param y\n     */\n    public hitTest(\n        x: number,\n        y: number,\n    ): DisplayObject\n    {\n        EventsTicker.pauseUpdate = true;\n        // if we are using global move events, we need to hit test the whole scene graph\n        const useMove = this._isPointerMoveEvent && this.enableGlobalMoveEvents;\n        const fn = useMove ? 'hitTestMoveRecursive' : 'hitTestRecursive';\n        const invertedPath = this[fn](\n            this.rootTarget,\n            this.rootTarget.eventMode,\n            tempHitLocation.set(x, y),\n            this.hitTestFn,\n            this.hitPruneFn,\n        );\n\n        return invertedPath && invertedPath[0];\n    }\n\n    /**\n     * Propagate the passed event from from {@link PIXI.EventBoundary.rootTarget this.rootTarget} to its\n     * target {@code e.target}.\n     * @param e - The event to propagate.\n     * @param type\n     */\n    public propagate(e: FederatedEvent, type?: string): void\n    {\n        if (!e.target)\n        {\n            // This usually occurs when the scene graph is not interactive.\n            return;\n        }\n\n        const composedPath = e.composedPath();\n\n        // Capturing phase\n        e.eventPhase = e.CAPTURING_PHASE;\n\n        for (let i = 0, j = composedPath.length - 1; i < j; i++)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n\n        // At target phase\n        e.eventPhase = e.AT_TARGET;\n        e.currentTarget = e.target;\n\n        this.notifyTarget(e, type);\n\n        if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n\n        // Bubbling phase\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        for (let i = composedPath.length - 2; i >= 0; i--)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n    }\n\n    /**\n     * Emits the event {@code e} to all interactive display objects. The event is propagated in the bubbling phase always.\n     *\n     * This is used in the `globalpointermove` event.\n     * @param e - The emitted event.\n     * @param type - The listeners to notify.\n     * @param targets - The targets to notify.\n     */\n    public all(e: FederatedEvent, type?: string | string[], targets = this._allInteractiveElements): void\n    {\n        if (targets.length === 0) return;\n\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        const events = Array.isArray(type) ? type : [type];\n\n        // loop through all interactive elements and notify them of the event\n        // loop through targets backwards\n        for (let i = targets.length - 1; i >= 0; i--)\n        {\n            events.forEach((event) =>\n            {\n                e.currentTarget = targets[i];\n                this.notifyTarget(e, event);\n            });\n        }\n    }\n\n    /**\n     * Finds the propagation path from {@link PIXI.EventBoundary.rootTarget rootTarget} to the passed\n     * {@code target}. The last element in the path is {@code target}.\n     * @param target\n     */\n    public propagationPath(target: FederatedEventTarget): FederatedEventTarget[]\n    {\n        const propagationPath = [target];\n\n        for (let i = 0; i < PROPAGATION_LIMIT && target !== this.rootTarget; i++)\n        {\n            if (!target.parent)\n            {\n                throw new Error('Cannot find propagation path to disconnected target');\n            }\n\n            propagationPath.push(target.parent);\n\n            target = target.parent;\n        }\n\n        propagationPath.reverse();\n\n        return propagationPath;\n    }\n\n    protected hitTestMoveRecursive(\n        currentTarget: DisplayObject,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean,\n        ignore = false\n    ): DisplayObject[]\n    {\n        let shouldReturn = false;\n\n        // only bail out early if it is not interactive\n        if (this._interactivePrune(currentTarget)) return null;\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestMoveRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn,\n                    ignore || pruneFn(currentTarget, location)\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive)\n                    {\n                        if (isInteractive) this._allInteractiveElements.push(currentTarget);\n                        nestedHit.push(currentTarget);\n                    }\n\n                    // store all hit elements to be returned once we have traversed the whole tree\n                    if (this._hitElements.length === 0) this._hitElements = nestedHit;\n\n                    shouldReturn = true;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        if (isInteractiveMode && isInteractiveTarget) this._allInteractiveElements.push(currentTarget);\n\n        // we don't carry on hit testing something once we have found a hit,\n        // now only care about gathering the interactive elements\n        if (ignore || this._hitElements.length > 0) return null;\n\n        if (shouldReturn) return this._hitElements as DisplayObject[];\n\n        // Finally, hit test this DisplayObject itself.\n        if (isInteractiveMode && (!pruneFn(currentTarget, location) && testFn(currentTarget, location)))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    /**\n     * Recursive implementation for {@link PIXI.EventBoundary.hitTest hitTest}.\n     * @param currentTarget - The DisplayObject that is to be hit tested.\n     * @param eventMode - The event mode for the `currentTarget` or one of its parents.\n     * @param location - The location that is being tested for overlap.\n     * @param testFn - Callback that determines whether the target passes hit testing. This callback\n     *  can assume that `pruneFn` failed to prune the display object.\n     * @param pruneFn - Callback that determiness whether the target and all of its children\n     *  cannot pass the hit test. It is used as a preliminary optimization to prune entire subtrees\n     *  of the scene graph.\n     * @returns An array holding the hit testing target and all its ancestors in order. The first element\n     *  is the target itself and the last is {@link PIXI.EventBoundary.rootTarget rootTarget}. This is the opposite\n     *  order w.r.t. the propagation path. If no hit testing target is found, null is returned.\n     */\n    protected hitTestRecursive(\n        currentTarget: DisplayObject,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean\n    ): DisplayObject[]\n    {\n        // Attempt to prune this DisplayObject and its subtree as an optimization.\n        if (this._interactivePrune(currentTarget) || pruneFn(currentTarget, location))\n        {\n            return null;\n        }\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        // Find a child that passes the hit testing and return one, if any.\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive) nestedHit.push(currentTarget);\n\n                    return nestedHit;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        // Finally, hit test this DisplayObject itself.\n        if (isInteractiveMode && testFn(currentTarget, location))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    private _isInteractive(int: EventMode): int is 'static' | 'dynamic'\n    {\n        return int === 'static' || int === 'dynamic';\n    }\n\n    private _interactivePrune(displayObject: DisplayObject): boolean\n    {\n        // If displayObject is a mask, invisible, or not renderable then it cannot be hit directly.\n        if (!displayObject || displayObject.isMask || !displayObject.visible || !displayObject.renderable)\n        {\n            return true;\n        }\n\n        // If this DisplayObject is none then it cannot be hit by anything.\n        if (displayObject.eventMode === 'none')\n        {\n            return true;\n        }\n\n        // If this DisplayObject is passive and it has no interactive children then it cannot be hit\n        if (displayObject.eventMode === 'passive' && !displayObject.interactiveChildren)\n        {\n            return true;\n        }\n\n        // If displayObject is a mask then it cannot be hit directly.\n        if (displayObject.isMask)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object or any of its children cannot pass the hit test at all.\n     *\n     * {@link PIXI.EventBoundary}'s implementation uses the {@link PIXI.DisplayObject.hitArea hitArea}\n     * and {@link PIXI.DisplayObject._mask} for pruning.\n     * @param displayObject\n     * @param location\n     */\n    protected hitPruneFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        if (displayObject.hitArea)\n        {\n            displayObject.worldTransform.applyInverse(location, tempLocalMapping);\n\n            if (!displayObject.hitArea.contains(tempLocalMapping.x, tempLocalMapping.y))\n            {\n                return true;\n            }\n        }\n\n        if (displayObject._mask)\n        {\n            const maskObject = ((displayObject._mask as any).isMaskData\n                ? (displayObject._mask as any).maskObject : displayObject._mask);\n\n            if (maskObject && !maskObject.containsPoint?.(location))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object passes hit testing for the given location.\n     * @param displayObject\n     * @param location\n     * @returns - Whether `displayObject` passes hit testing for `location`.\n     */\n    protected hitTestFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        // If the displayObject is passive then it cannot be hit directly.\n        if (displayObject.eventMode === 'passive')\n        {\n            return false;\n        }\n\n        // If the display object failed pruning with a hitArea, then it must pass it.\n        if (displayObject.hitArea)\n        {\n            return true;\n        }\n\n        if ((displayObject as any).containsPoint)\n        {\n            return (displayObject as any).containsPoint(location) as boolean;\n        }\n\n        // TODO: Should we hit test based on bounds?\n\n        return false;\n    }\n\n    /**\n     * Notify all the listeners to the event's `currentTarget`.\n     *\n     * If the `currentTarget` contains the property `on<type>`, then it is called here,\n     * simulating the behavior from version 6.x and prior.\n     * @param e - The event passed to the target.\n     * @param type\n     */\n    protected notifyTarget(e: FederatedEvent, type?: string): void\n    {\n        type = type ?? e.type;\n\n        // call the `on${type}` for the current target if it exists\n        const handlerKey = `on${type}` as keyof IFederatedDisplayObject;\n\n        (e.currentTarget[handlerKey] as FederatedEventHandler<FederatedEvent>)?.(e);\n\n        const key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? `${type}capture` : type;\n\n        this.notifyListeners(e, key);\n\n        if (e.eventPhase === e.AT_TARGET)\n        {\n            this.notifyListeners(e, type);\n        }\n    }\n\n    /**\n     * Maps the upstream `pointerdown` events to a downstream `pointerdown` event.\n     *\n     * `touchstart`, `rightdown`, `mousedown` events are also dispatched for specific pointer types.\n     * @param from\n     */\n    protected mapPointerDown(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerdown');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchstart');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightdown' : 'mousedown');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        trackingData.pressTargetsByButton[from.button] = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointermove` to downstream `pointerout`, `pointerover`, and `pointermove` events, in that order.\n     *\n     * The tracking data for the specific pointer has an updated `overTarget`. `mouseout`, `mouseover`,\n     * `mousemove`, and `touchmove` events are fired as well for specific pointer types.\n     * @param from - The upstream `pointermove` event.\n     */\n    protected mapPointerMove(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        this._isPointerMoveEvent = true;\n        const e = this.createPointerEvent(from);\n\n        this._isPointerMoveEvent = false;\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n        const trackingData = this.trackingData(from.pointerId);\n        const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n        // First pointerout/pointerleave\n        if (trackingData.overTargets?.length > 0 && outTarget !== e.target)\n        {\n            // pointerout always occurs on the overTarget when the pointer hovers over another element.\n            const outType = from.type === 'mousemove' ? 'mouseout' : 'pointerout';\n            const outEvent = this.createPointerEvent(from, outType, outTarget);\n\n            this.dispatchEvent(outEvent, 'pointerout');\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // If the pointer exits overTarget and its descendants, then a pointerleave event is also fired. This event\n            // is dispatched to all ancestors that no longer capture the pointer.\n            if (!e.composedPath().includes(outTarget))\n            {\n                const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n                leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n                while (leaveEvent.target && !e.composedPath().includes(leaveEvent.target))\n                {\n                    leaveEvent.currentTarget = leaveEvent.target;\n\n                    this.notifyTarget(leaveEvent);\n                    if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                    leaveEvent.target = leaveEvent.target.parent;\n                }\n\n                this.freeEvent(leaveEvent);\n            }\n\n            this.freeEvent(outEvent);\n        }\n\n        // Then pointerover\n        if (outTarget !== e.target)\n        {\n            // pointerover always occurs on the new overTarget\n            const overType = from.type === 'mousemove' ? 'mouseover' : 'pointerover';\n            const overEvent = this.clonePointerEvent(e, overType);// clone faster\n\n            this.dispatchEvent(overEvent, 'pointerover');\n            if (isMouse) this.dispatchEvent(overEvent, 'mouseover');\n\n            // Probe whether the newly hovered DisplayObject is an ancestor of the original overTarget.\n            let overTargetAncestor = outTarget?.parent;\n\n            while (overTargetAncestor && overTargetAncestor !== this.rootTarget.parent)\n            {\n                if (overTargetAncestor === e.target) break;\n\n                overTargetAncestor = overTargetAncestor.parent;\n            }\n\n            // The pointer has entered a non-ancestor of the original overTarget. This means we need a pointerentered\n            // event.\n            const didPointerEnter = !overTargetAncestor || overTargetAncestor === this.rootTarget.parent;\n\n            if (didPointerEnter)\n            {\n                const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n                enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n                while (enterEvent.target\n                        && enterEvent.target !== outTarget\n                        && enterEvent.target !== this.rootTarget.parent)\n                {\n                    enterEvent.currentTarget = enterEvent.target;\n\n                    this.notifyTarget(enterEvent);\n                    if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n                    enterEvent.target = enterEvent.target.parent;\n                }\n\n                this.freeEvent(enterEvent);\n            }\n\n            this.freeEvent(overEvent);\n        }\n\n        const allMethods: string[] = [];\n        const allowGlobalPointerEvents = this.enableGlobalMoveEvents ?? true;\n\n        /* eslint-disable @typescript-eslint/no-unused-expressions */\n        this.moveOnAll ? allMethods.push('pointermove') : this.dispatchEvent(e, 'pointermove');\n        allowGlobalPointerEvents && allMethods.push('globalpointermove');\n\n        // Then pointermove\n        if (e.pointerType === 'touch')\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'touchmove') : this.dispatchEvent(e, 'touchmove');\n            allowGlobalPointerEvents && allMethods.push('globaltouchmove');\n        }\n\n        if (isMouse)\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'mousemove') : this.dispatchEvent(e, 'mousemove');\n            allowGlobalPointerEvents && allMethods.push('globalmousemove');\n            this.cursor = e.target?.cursor;\n        }\n\n        if (allMethods.length > 0)\n        {\n            this.all(e, allMethods);\n        }\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        /* eslint-enable @typescript-eslint/no-unused-expressions */\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerover` to downstream `pointerover` and `pointerenter` events, in that order.\n     *\n     * The tracking data for the specific pointer gets a new `overTarget`.\n     * @param from - The upstream `pointerover` event.\n     */\n    protected mapPointerOver(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const e = this.createPointerEvent(from);\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n\n        this.dispatchEvent(e, 'pointerover');\n        if (isMouse) this.dispatchEvent(e, 'mouseover');\n        if (e.pointerType === 'mouse') this.cursor = e.target?.cursor;\n\n        // pointerenter events must be fired since the pointer entered from upstream.\n        const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n        enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n        while (enterEvent.target && enterEvent.target !== this.rootTarget.parent)\n        {\n            enterEvent.currentTarget = enterEvent.target;\n\n            this.notifyTarget(enterEvent);\n            if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n            enterEvent.target = enterEvent.target.parent;\n        }\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n        this.freeEvent(enterEvent);\n    }\n\n    /**\n     * Maps the upstream `pointerout` to downstream `pointerout`, `pointerleave` events, in that order.\n     *\n     * The tracking data for the specific pointer is cleared of a `overTarget`.\n     * @param from - The upstream `pointerout` event.\n     */\n    protected mapPointerOut(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        if (trackingData.overTargets)\n        {\n            const isMouse = from.pointerType === 'mouse' || from.pointerType === 'pen';\n            const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n            // pointerout first\n            const outEvent = this.createPointerEvent(from, 'pointerout', outTarget);\n\n            this.dispatchEvent(outEvent);\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // pointerleave(s) are also dispatched b/c the pointer must've left rootTarget and its descendants to\n            // get an upstream pointerout event (upstream events do not know rootTarget has descendants).\n            const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n            leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n            while (leaveEvent.target && leaveEvent.target !== this.rootTarget.parent)\n            {\n                leaveEvent.currentTarget = leaveEvent.target;\n\n                this.notifyTarget(leaveEvent);\n                if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                leaveEvent.target = leaveEvent.target.parent;\n            }\n\n            trackingData.overTargets = null;\n\n            this.freeEvent(outEvent);\n            this.freeEvent(leaveEvent);\n        }\n\n        this.cursor = null;\n    }\n\n    /**\n     * Maps the upstream `pointerup` event to downstream `pointerup`, `pointerupoutside`,\n     * and `click`/`rightclick`/`pointertap` events, in that order.\n     *\n     * The `pointerupoutside` event bubbles from the original `pointerdown` target to the most specific\n     * ancestor of the `pointerdown` and `pointerup` targets, which is also the `click` event's target. `touchend`,\n     * `rightup`, `mouseup`, `touchendoutside`, `rightupoutside`, `mouseupoutside`, and `tap` are fired as well for\n     * specific pointer types.\n     * @param from - The upstream `pointerup` event.\n     */\n    protected mapPointerUp(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const now = performance.now();\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerup');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchend');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightup' : 'mouseup');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n\n        let clickTarget = pressTarget;\n\n        // pointerupoutside only bubbles. It only bubbles upto the parent that doesn't contain\n        // the pointerup location.\n        if (pressTarget && !e.composedPath().includes(pressTarget))\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget && !e.composedPath().includes(currentTarget))\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    const isRightButton = e.button === 2;\n\n                    this.notifyTarget(e, isRightButton ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n\n            // currentTarget is the most specific ancestor holding both the pointerdown and pointerup\n            // targets. That is - it's our click target!\n            clickTarget = currentTarget;\n        }\n\n        // click!\n        if (clickTarget)\n        {\n            const clickEvent = this.clonePointerEvent(e, 'click');\n\n            clickEvent.target = clickTarget;\n            clickEvent.path = null;\n\n            if (!trackingData.clicksByButton[from.button])\n            {\n                trackingData.clicksByButton[from.button] = {\n                    clickCount: 0,\n                    target: clickEvent.target,\n                    timeStamp: now,\n                };\n            }\n\n            const clickHistory = trackingData.clicksByButton[from.button];\n\n            if (clickHistory.target === clickEvent.target\n                && now - clickHistory.timeStamp < 200)\n            {\n                ++clickHistory.clickCount;\n            }\n            else\n            {\n                clickHistory.clickCount = 1;\n            }\n\n            clickHistory.target = clickEvent.target;\n            clickHistory.timeStamp = now;\n\n            clickEvent.detail = clickHistory.clickCount;\n\n            if (clickEvent.pointerType === 'mouse')\n            {\n                const isRightButton = clickEvent.button === 2;\n\n                this.dispatchEvent(clickEvent, isRightButton ? 'rightclick' : 'click');\n            }\n            else if (clickEvent.pointerType === 'touch')\n            {\n                this.dispatchEvent(clickEvent, 'tap');\n            }\n\n            this.dispatchEvent(clickEvent, 'pointertap');\n\n            this.freeEvent(clickEvent);\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerupoutside` event to a downstream `pointerupoutside` event, bubbling from the original\n     * `pointerdown` target to `rootTarget`.\n     *\n     * (The most specific ancestor of the `pointerdown` event and the `pointerup` event must the\n     * `{@link PIXI.EventBoundary}'s root because the `pointerup` event occurred outside of the boundary.)\n     *\n     * `touchendoutside`, `mouseupoutside`, and `rightupoutside` events are fired as well for specific pointer\n     * types. The tracking data for the specific pointer is cleared of a `pressTarget`.\n     * @param from - The upstream `pointerupoutside` event.\n     */\n    protected mapPointerUpOutside(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n        const e = this.createPointerEvent(from);\n\n        if (pressTarget)\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget)\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    this.notifyTarget(e, e.button === 2 ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `wheel` event to a downstream `wheel` event.\n     * @param from - The upstream `wheel` event.\n     */\n    protected mapWheel(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedWheelEvent))\n        {\n            console.warn('EventBoundary cannot map a non-wheel event as a wheel event');\n\n            return;\n        }\n\n        const wheelEvent = this.createWheelEvent(from);\n\n        this.dispatchEvent(wheelEvent);\n        this.freeEvent(wheelEvent);\n    }\n\n    /**\n     * Finds the most specific event-target in the given propagation path that is still mounted in the scene graph.\n     *\n     * This is used to find the correct `pointerup` and `pointerout` target in the case that the original `pointerdown`\n     * or `pointerover` target was unmounted from the scene graph.\n     * @param propagationPath - The propagation path was valid in the past.\n     * @returns - The most specific event-target still mounted at the same location in the scene graph.\n     */\n    protected findMountedTarget(propagationPath: FederatedEventTarget[]): FederatedEventTarget\n    {\n        if (!propagationPath)\n        {\n            return null;\n        }\n\n        let currentTarget = propagationPath[0];\n\n        for (let i = 1; i < propagationPath.length; i++)\n        {\n            // Set currentTarget to the next target in the path only if it is still attached to the\n            // scene graph (i.e. parent still points to the expected ancestor).\n            if (propagationPath[i].parent === currentTarget)\n            {\n                currentTarget = propagationPath[i];\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        return currentTarget;\n    }\n\n    /**\n     * Creates an event whose {@code originalEvent} is {@code from}, with an optional `type` and `target` override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The {@code originalEvent} for the returned event.\n     * @param [type=from.type] - The type of the returned event.\n     * @param target - The target of the returned event.\n     */\n    protected createPointerEvent(\n        from: FederatedPointerEvent,\n        type?: string,\n        target?: FederatedEventTarget\n    ): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = target\n            ?? this.hitTest(event.global.x, event.global.y) as FederatedEventTarget\n            ?? this._hitElements[0];\n\n        if (typeof type === 'string')\n        {\n            event.type = type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Creates a wheel event whose {@code originalEvent} is {@code from}.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The upstream wheel event.\n     */\n    protected createWheelEvent(from: FederatedWheelEvent): FederatedWheelEvent\n    {\n        const event = this.allocateEvent(FederatedWheelEvent);\n\n        this.copyWheelData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = this.hitTest(event.global.x, event.global.y);\n\n        return event;\n    }\n\n    /**\n     * Clones the event {@code from}, with an optional {@code type} override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The event to clone.\n     * @param [type=from.type] - The type of the returned event.\n     */\n    protected clonePointerEvent(from: FederatedPointerEvent, type?: string): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from.originalEvent;\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        // copy propagation path for perf\n        event.target = from.target;\n        event.path = from.composedPath().slice();\n        event.type = type ?? event.type;\n\n        return event;\n    }\n\n    /**\n     * Copies wheel {@link PIXI.FederatedWheelEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + deltaMode\n     * + deltaX\n     * + deltaY\n     * + deltaZ\n     * @param from\n     * @param to\n     */\n    protected copyWheelData(from: FederatedWheelEvent, to: FederatedWheelEvent): void\n    {\n        to.deltaMode = from.deltaMode;\n        to.deltaX = from.deltaX;\n        to.deltaY = from.deltaY;\n        to.deltaZ = from.deltaZ;\n    }\n\n    /**\n     * Copies pointer {@link PIXI.FederatedPointerEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + pointerId\n     * + width\n     * + height\n     * + isPrimary\n     * + pointerType\n     * + pressure\n     * + tangentialPressure\n     * + tiltX\n     * + tiltY\n     * @param from\n     * @param to\n     */\n    protected copyPointerData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent && to instanceof FederatedPointerEvent)) return;\n\n        to.pointerId = from.pointerId;\n        to.width = from.width;\n        to.height = from.height;\n        to.isPrimary = from.isPrimary;\n        to.pointerType = from.pointerType;\n        to.pressure = from.pressure;\n        to.tangentialPressure = from.tangentialPressure;\n        to.tiltX = from.tiltX;\n        to.tiltY = from.tiltY;\n        to.twist = from.twist;\n    }\n\n    /**\n     * Copies mouse {@link PIXI.FederatedMouseEvent} data from {@code from} to {@code to}.\n     *\n     * The following properties are copied:\n     * + altKey\n     * + button\n     * + buttons\n     * + clientX\n     * + clientY\n     * + metaKey\n     * + movementX\n     * + movementY\n     * + pageX\n     * + pageY\n     * + x\n     * + y\n     * + screen\n     * + shiftKey\n     * + global\n     * @param from\n     * @param to\n     */\n    protected copyMouseData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent)) return;\n\n        to.altKey = from.altKey;\n        to.button = from.button;\n        to.buttons = from.buttons;\n        to.client.copyFrom(from.client);\n        to.ctrlKey = from.ctrlKey;\n        to.metaKey = from.metaKey;\n        to.movement.copyFrom(from.movement);\n        to.screen.copyFrom(from.screen);\n        to.shiftKey = from.shiftKey;\n        to.global.copyFrom(from.global);\n    }\n\n    /**\n     * Copies base {@link PIXI.FederatedEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + isTrusted\n     * + srcElement\n     * + timeStamp\n     * + type\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        to.isTrusted = from.isTrusted;\n        to.srcElement = from.srcElement;\n        to.timeStamp = performance.now();\n        to.type = from.type;\n        to.detail = from.detail;\n        to.view = from.view;\n        to.which = from.which;\n        to.layer.copyFrom(from.layer);\n        to.page.copyFrom(from.page);\n    }\n\n    /**\n     * @param id - The pointer ID.\n     * @returns The tracking data stored for the given pointer. If no data exists, a blank\n     *  state will be created.\n     */\n    protected trackingData(id: number): TrackingData\n    {\n        if (!this.mappingState.trackingData[id])\n        {\n            this.mappingState.trackingData[id] = {\n                pressTargetsByButton: {},\n                clicksByButton: {},\n                overTarget: null\n            };\n        }\n\n        return this.mappingState.trackingData[id];\n    }\n\n    /**\n     * Allocate a specific type of event from {@link PIXI.EventBoundary#eventPool this.eventPool}.\n     *\n     * This allocation is constructor-agnostic, as long as it only takes one argument - this event\n     * boundary.\n     * @param constructor - The event's constructor.\n     */\n    protected allocateEvent<T extends FederatedEvent>(\n        constructor: { new(boundary: EventBoundary): T }\n    ): T\n    {\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        const event = this.eventPool.get(constructor as any).pop() as T\n            || new constructor(this);\n\n        event.eventPhase = event.NONE;\n        event.currentTarget = null;\n        event.path = null;\n        event.target = null;\n\n        return event;\n    }\n\n    /**\n     * Frees the event and puts it back into the event pool.\n     *\n     * It is illegal to reuse the event until it is allocated again, using `this.allocateEvent`.\n     *\n     * It is also advised that events not allocated from {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}\n     * not be freed. This is because of the possibility that the same event is freed twice, which can cause\n     * it to be allocated twice & result in overwriting.\n     * @param event - The event to be freed.\n     * @throws Error if the event is managed by another event boundary.\n     */\n    protected freeEvent<T extends FederatedEvent>(event: T): void\n    {\n        if (event.manager !== this) throw new Error('It is illegal to free an event not managed by this EventBoundary!');\n\n        const constructor = event.constructor;\n\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        this.eventPool.get(constructor as any).push(event);\n    }\n\n    /**\n     * Similar to {@link PIXI.EventEmitter.emit}, except it stops if the `propagationImmediatelyStopped` flag\n     * is set on the event.\n     * @param e - The event to call each listener with.\n     * @param type - The event key.\n     */\n    private notifyListeners(e: FederatedEvent, type: string): void\n    {\n        const listeners = ((e.currentTarget as any)._events as EmitterListeners)[type];\n\n        if (!listeners) return;\n        if (!e.currentTarget.isInteractive()) return;\n\n        if ('fn' in listeners)\n        {\n            if (listeners.once) e.currentTarget.removeListener(type, listeners.fn, undefined, true);\n            listeners.fn.call(listeners.context, e);\n        }\n        else\n        {\n            for (\n                let i = 0, j = listeners.length;\n                i < j && !e.propagationImmediatelyStopped;\n                i++)\n            {\n                if (listeners[i].once) e.currentTarget.removeListener(type, listeners[i].fn, undefined, true);\n                listeners[i].fn.call(listeners[i].context, e);\n            }\n        }\n    }\n}\n", "import { extensions, ExtensionType } from '@pixi/core';\nimport { EventBoundary } from './EventBoundary';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { ExtensionMetadata, IPointData, IRenderer, ISystem } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { PixiTouch } from './FederatedEvent';\nimport type { EventMode } from './FederatedEventTarget';\nimport type { FederatedMouseEvent } from './FederatedMouseEvent';\n\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER: Record<string, string> = {\n    touchstart: 'pointerdown',\n    touchend: 'pointerup',\n    touchendoutside: 'pointerupoutside',\n    touchmove: 'pointermove',\n    touchcancel: 'pointercancel',\n};\n\n/** @ignore */\nexport interface EventSystemOptions\n{\n    /**\n     * The default event mode mode for all display objects.\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @memberof PIXI.IRendererOptions\n     */\n    eventMode?: EventMode;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @memberof PIXI.IRendererOptions\n     * @example\n     * const app = new PIXI.Application({\n     *   view: canvas,\n     *   events: {\n     *     move: true,\n     *     globalMove: false,\n     *     click: true,\n     *     wheel: true,\n     *   },\n     * });\n     */\n    eventFeatures?: Partial<EventSystemFeatures>\n}\n\n/**\n * The event features that are enabled by the EventSystem\n * This option only is available when using **@pixi/events** package\n * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n * @memberof PIXI\n * @since 7.2.0\n */\ninterface EventSystemFeatures\n{\n    /**\n     * Enables pointer events associated with pointer movement:\n     * - `pointermove` / `mousemove` / `touchmove`\n     * - `pointerout` / `mouseout`\n     * - `pointerover` / `mouseover`\n     */\n    move: boolean;\n    // eslint-disable-next-line jsdoc/multiline-blocks\n    /**\n     * Enables global pointer move events:\n     * - `globalpointermove`\n     * - `globalmousemove`\n     * - `globaltouchemove`\n     */\n    globalMove: boolean;\n    /**\n     * Enables pointer events associated with clicking:\n     * - `pointerup` / `mouseup` / `touchend` / 'rightup'\n     * - `pointerupoutside` / `mouseupoutside` / `touchendoutside` / 'rightupoutside'\n     * - `pointerdown` / 'mousedown' / `touchstart` / 'rightdown'\n     * - `click` / `tap`\n     */\n    click: boolean;\n    /** - Enables wheel events. */\n    wheel: boolean;\n}\n\n/**\n * The system for handling UI events.\n * @memberof PIXI\n */\nexport class EventSystem implements ISystem<EventSystemOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'events',\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n    };\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     */\n    public static defaultEventFeatures: EventSystemFeatures = {\n        move: true,\n        globalMove: true,\n        click: true,\n        wheel: true,\n    };\n\n    private static _defaultEventMode: EventMode;\n\n    /**\n     * The default interaction mode for all display objects.\n     * @see PIXI.DisplayObject.eventMode\n     * @type {PIXI.EventMode}\n     * @readonly\n     * @since 7.2.0\n     */\n    public static get defaultEventMode()\n    {\n        return this._defaultEventMode;\n    }\n\n    /**\n     * The {@link PIXI.EventBoundary} for the stage.\n     *\n     * The {@link PIXI.EventBoundary#rootTarget rootTarget} of this root boundary is automatically set to\n     * the last rendered object before any event processing is initiated. This means the main scene\n     * needs to be rendered atleast once before UI events will start propagating.\n     *\n     * The root boundary should only be changed during initialization. Otherwise, any state held by the\n     * event boundary may be lost (like hovered & pressed DisplayObjects).\n     */\n    public readonly rootBoundary: EventBoundary;\n\n    /** Does the device support touch events https://www.w3.org/TR/touch-events/ */\n    public readonly supportsTouchEvents = 'ontouchstart' in globalThis;\n\n    /** Does the device support pointer events https://www.w3.org/Submission/pointer-events/ */\n    public readonly supportsPointerEvents = !!globalThis.PointerEvent;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     * @default true\n     */\n    public autoPreventDefault: boolean;\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for {@code domElement},\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     */\n    public cursorStyles: Record<string, string | ((mode: string) => void) | CSSStyleDeclaration>;\n\n    /**\n     * The DOM element to which the root event listeners are bound. This is automatically set to\n     * the renderer's {@link PIXI.Renderer#view view}.\n     */\n    public domElement: HTMLElement = null;\n\n    /** The resolution used to convert between the DOM client space into world space. */\n    public resolution = 1;\n\n    /** The renderer managing this {@link PIXI.EventSystem}. */\n    public renderer: IRenderer;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     * @example\n     * const app = new PIXI.Application()\n     * app.renderer.events.features.globalMove = false\n     *\n     * // to override all features use Object.assign\n     * Object.assign(app.renderer.events.features, {\n     *  move: false,\n     *  globalMove: false,\n     *  click: false,\n     *  wheel: false,\n     * })\n     */\n    public readonly features: EventSystemFeatures;\n\n    private currentCursor: string;\n    private rootPointerEvent: FederatedPointerEvent;\n    private rootWheelEvent: FederatedWheelEvent;\n    private eventsAdded: boolean;\n\n    /**\n     * @param {PIXI.Renderer} renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n        this.rootBoundary = new EventBoundary(null);\n        EventsTicker.init(this);\n\n        this.autoPreventDefault = true;\n        this.eventsAdded = false;\n\n        this.rootPointerEvent = new FederatedPointerEvent(null);\n        this.rootWheelEvent = new FederatedWheelEvent(null);\n\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        this.features = new Proxy({ ...EventSystem.defaultEventFeatures }, {\n            set: (target, key, value) =>\n            {\n                if (key === 'globalMove')\n                {\n                    this.rootBoundary.enableGlobalMoveEvents = value;\n                }\n                target[key as keyof EventSystemFeatures] = value;\n\n                return true;\n            }\n        });\n\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.onPointerOverOut = this.onPointerOverOut.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    init(options: EventSystemOptions): void\n    {\n        const { view, resolution } = this.renderer;\n\n        this.setTargetElement(view as HTMLCanvasElement);\n        this.resolution = resolution;\n        EventSystem._defaultEventMode = options.eventMode ?? 'auto';\n        Object.assign(this.features, options.eventFeatures ?? {});\n        this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;\n    }\n\n    /**\n     * Handle changing resolution.\n     * @ignore\n     */\n    resolutionChange(resolution: number): void\n    {\n        this.resolution = resolution;\n    }\n\n    /** Destroys all event listeners and detaches the renderer. */\n    destroy(): void\n    {\n        this.setTargetElement(null);\n        this.renderer = null;\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     * @param mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursor(mode: string): void\n    {\n        mode = mode || 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this.currentCursor === mode)\n        {\n            return;\n        }\n        this.currentCursor = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.domElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.domElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.domElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * The global pointer event.\n     * Useful for getting the pointer position without listening to events.\n     * @since 7.2.0\n     */\n    public get pointer(): Readonly<FederatedPointerEvent>\n    {\n        return this.rootPointerEvent;\n    }\n\n    /**\n     * Event handler for pointer down events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerDown(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        const events = this.normalizeToPointerData(nativeEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = nativeEvent.cancelable || !('cancelable' in nativeEvent);\n\n            if (cancelable)\n            {\n                nativeEvent.preventDefault();\n            }\n        }\n\n        for (let i = 0, j = events.length; i < j; i++)\n        {\n            const nativeEvent = events[i];\n            const federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent);\n\n            this.rootBoundary.mapEvent(federatedEvent);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer move events on on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch events.\n     */\n    private onPointerMove(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.move) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        EventsTicker.pointerMoved();\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer up events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerUp(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        let target = nativeEvent.target;\n\n        // if in shadow DOM use composedPath to access target\n        if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0)\n        {\n            target = nativeEvent.composedPath()[0];\n        }\n\n        const outside = target !== this.domElement ? 'outside' : '';\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            event.type += outside;\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer over & out events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerOverOut(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Passive handler for `wheel` events on {@link PIXI.EventSystem.domElement this.domElement}.\n     * @param nativeEvent - The native wheel event.\n     */\n    protected onWheel(nativeEvent: WheelEvent): void\n    {\n        if (!this.features.wheel) return;\n        const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        this.rootBoundary.mapEvent(wheelEvent);\n    }\n\n    /**\n     * Sets the {@link PIXI.EventSystem#domElement domElement} and binds event listeners.\n     *\n     * To deregister the current DOM element without setting a new one, pass {@code null}.\n     * @param element - The new DOM element.\n     */\n    public setTargetElement(element: HTMLElement): void\n    {\n        this.removeEvents();\n        this.domElement = element;\n        EventsTicker.domElement = element;\n        this.addEvents();\n    }\n\n    /** Register event listeners on {@link PIXI.Renderer#domElement this.domElement}. */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.addTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if (style)\n        {\n            if ((globalThis.navigator as any).msPointerEnabled)\n            {\n                style.msContentZooming = 'none';\n                style.msTouchAction = 'none';\n            }\n            else if (this.supportsPointerEvents)\n            {\n                style.touchAction = 'none';\n            }\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.domElement.addEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.addEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.addEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.addEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.addEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.addEventListener('mouseup', this.onPointerUp, true);\n\n            if (this.supportsTouchEvents)\n            {\n                this.domElement.addEventListener('touchstart', this.onPointerDown, true);\n                // this.domElement.addEventListener('touchcancel', this.onPointerCancel, true);\n                this.domElement.addEventListener('touchend', this.onPointerUp, true);\n                this.domElement.addEventListener('touchmove', this.onPointerMove, true);\n            }\n        }\n\n        this.domElement.addEventListener('wheel', this.onWheel, {\n            passive: true,\n            capture: true,\n        });\n\n        this.eventsAdded = true;\n    }\n\n    /** Unregister event listeners on {@link PIXI.EventSystem#domElement this.domElement}. */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.removeTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if ((globalThis.navigator as any).msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.domElement.removeEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.removeEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.removeEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.removeEventListener('mouseup', this.onPointerUp, true);\n\n            if (this.supportsTouchEvents)\n            {\n                this.domElement.removeEventListener('touchstart', this.onPointerDown, true);\n                // this.domElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n                this.domElement.removeEventListener('touchend', this.onPointerUp, true);\n                this.domElement.removeEventListener('touchmove', this.onPointerMove, true);\n            }\n        }\n\n        this.domElement.removeEventListener('wheel', this.onWheel, true);\n\n        this.domElement = null;\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     * @param  {PIXI.IPointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        const rect = this.domElement.isConnected\n            ? this.domElement.getBoundingClientRect()\n            : {\n                x: 0,\n                y: 0,\n                width: (this.domElement as any).width,\n                height: (this.domElement as any).height,\n                left: 0,\n                top: 0\n            };\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.domElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.domElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     * @param event - The original event data from a touch or mouse event\n     * @returns An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: TouchEvent | MouseEvent | PointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = 1;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n                touch.type = event.type;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!globalThis.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n     *\n     * The returned {@link PIXI.FederatedWheelEvent} is a shared instance. It will not persist across\n     * multiple native wheel events.\n     * @param nativeEvent - The native wheel event that occurred on the canvas.\n     * @returns A federated wheel event.\n     */\n    protected normalizeWheelEvent(nativeEvent: WheelEvent): FederatedWheelEvent\n    {\n        const event = this.rootWheelEvent;\n\n        this.transferMouseData(event, nativeEvent);\n\n        // When WheelEvent is triggered by scrolling with mouse wheel, reading WheelEvent.deltaMode\n        // before deltaX/deltaY/deltaZ on Firefox will result in WheelEvent.DOM_DELTA_LINE (1),\n        // while reading WheelEvent.deltaMode after deltaX/deltaY/deltaZ on Firefox or reading\n        // in any order on other browsers will result in WheelEvent.DOM_DELTA_PIXEL (0).\n        // Therefore, we need to read WheelEvent.deltaMode after deltaX/deltaY/deltaZ in order to\n        // make its behavior more consistent across browsers.\n        // @see https://github.com/pixijs/pixijs/issues/8970\n        event.deltaX = nativeEvent.deltaX;\n        event.deltaY = nativeEvent.deltaY;\n        event.deltaZ = nativeEvent.deltaZ;\n        event.deltaMode = nativeEvent.deltaMode;\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);\n        event.offset.copyFrom(event.screen);\n\n        event.nativeEvent = nativeEvent;\n        event.type = nativeEvent.type;\n\n        return event;\n    }\n\n    /**\n     * Normalizes the `nativeEvent` into a federateed {@link PIXI.FederatedPointerEvent}.\n     * @param event\n     * @param nativeEvent\n     */\n    private bootstrapEvent(event: FederatedPointerEvent, nativeEvent: PointerEvent): FederatedPointerEvent\n    {\n        event.originalEvent = null;\n        event.nativeEvent = nativeEvent;\n\n        event.pointerId = nativeEvent.pointerId;\n        event.width = nativeEvent.width;\n        event.height = nativeEvent.height;\n        event.isPrimary = nativeEvent.isPrimary;\n        event.pointerType = nativeEvent.pointerType;\n        event.pressure = nativeEvent.pressure;\n        event.tangentialPressure = nativeEvent.tangentialPressure;\n        event.tiltX = nativeEvent.tiltX;\n        event.tiltY = nativeEvent.tiltY;\n        event.twist = nativeEvent.twist;\n        this.transferMouseData(event, nativeEvent);\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);// global = screen for top-level\n        event.offset.copyFrom(event.screen);// EventBoundary recalculates using its rootTarget\n\n        event.isTrusted = nativeEvent.isTrusted;\n        if (event.type === 'pointerleave')\n        {\n            event.type = 'pointerout';\n        }\n        if (event.type.startsWith('mouse'))\n        {\n            event.type = event.type.replace('mouse', 'pointer');\n        }\n        if (event.type.startsWith('touch'))\n        {\n            event.type = TOUCH_TO_POINTER[event.type] || event.type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n     * @param event\n     * @param nativeEvent\n     */\n    private transferMouseData(event: FederatedMouseEvent, nativeEvent: MouseEvent): void\n    {\n        event.isTrusted = nativeEvent.isTrusted;\n        event.srcElement = nativeEvent.srcElement;\n        event.timeStamp = performance.now();\n        event.type = nativeEvent.type;\n\n        event.altKey = nativeEvent.altKey;\n        event.button = nativeEvent.button;\n        event.buttons = nativeEvent.buttons;\n        event.client.x = nativeEvent.clientX;\n        event.client.y = nativeEvent.clientY;\n        event.ctrlKey = nativeEvent.ctrlKey;\n        event.metaKey = nativeEvent.metaKey;\n        event.movement.x = nativeEvent.movementX;\n        event.movement.y = nativeEvent.movementY;\n        event.page.x = nativeEvent.pageX;\n        event.page.y = nativeEvent.pageY;\n        event.relatedTarget = null;\n        event.shiftKey = nativeEvent.shiftKey;\n    }\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n    type: string;\n}\n\nextensions.add(EventSystem);\n", "import { utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { EventSystem } from './EventSystem';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { AllFederatedEventMap } from './FederatedEventMap';\nimport type { FederatedPointerEvent } from './FederatedPointerEvent';\nimport type { FederatedWheelEvent } from './FederatedWheelEvent';\n\nexport type Cursor = 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'e-resize'\n| 'n-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 's-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'w-resize'\n| 'ns-resize'\n| 'ew-resize'\n| 'nesw-resize'\n| 'col-resize'\n| 'nwse-resize'\n| 'row-resize'\n| 'all-scroll'\n| 'zoom-in'\n| 'zoom-out'\n| 'grab'\n| 'grabbing';\n\n// @ignore - This is documented elsewhere.\nexport interface IHitArea\n{\n    contains(x: number, y: number): boolean;\n}\n\n/**\n * Function type for handlers, e.g., onclick\n * @memberof PIXI\n */\nexport type FederatedEventHandler<T= FederatedPointerEvent> = (event: T) => void;\n\n/**\n * The type of interaction a DisplayObject can be. For more information on values and their meaning,\n * see {@link PIXI.DisplayObject.eventMode DisplayObject's eventMode property}.\n * @memberof PIXI\n * @since 7.2.0\n */\nexport type EventMode = 'none' | 'passive' | 'auto' | 'static' | 'dynamic';\n\n/**\n * Describes the shape for a {@link PIXI.FederatedEvent}'s' `eventTarget`.\n * @memberof PIXI\n */\nexport interface FederatedEventTarget extends utils.EventEmitter, EventTarget\n{\n    /** The cursor preferred when the mouse pointer is hovering over. */\n    cursor: Cursor | string;\n\n    /** The parent of this event target. */\n    readonly parent?: FederatedEventTarget;\n\n    /** The children of this event target. */\n    readonly children?: ReadonlyArray<FederatedEventTarget>;\n\n    /** Whether this event target should fire UI events. */\n    interactive: boolean\n    _internalInteractive: boolean;\n    /** The mode of interaction for this object */\n    eventMode: EventMode;\n    _internalEventMode: EventMode;\n\n    /** Returns true if the DisplayObject has interactive 'static' or 'dynamic' */\n    isInteractive: () => boolean;\n\n    /** Whether this event target has any children that need UI events. This can be used optimize event propagation. */\n    interactiveChildren: boolean;\n\n    /** The hit-area specifies the area for which pointer events should be captured by this event target. */\n    hitArea: IHitArea | null;\n\n    // In Angular projects, zone.js is monkey patching the `EventTarget`\n    // by adding its own `removeAllListeners(event?: string): void;` method,\n    // so we have to override this signature when extending both `EventTarget` and `utils.EventEmitter`\n    // to make it compatible with Angular projects\n    // @see https://github.com/pixijs/pixijs/issues/8794\n\n    /** Remove all listeners, or those of the specified event. */\n    removeAllListeners(event?: string | symbol): this;\n\n    /** Handler for 'click' event */\n    onclick: FederatedEventHandler | null;\n    /** Handler for 'mousedown' event */\n    onmousedown: FederatedEventHandler | null;\n    /** Handler for 'mouseenter' event */\n    onmouseenter: FederatedEventHandler | null;\n    /** Handler for 'mouseleave' event */\n    onmouseleave: FederatedEventHandler | null;\n    /** Handler for 'mousemove' event */\n    onmousemove: FederatedEventHandler | null;\n    /** Handler for 'globalmousemove' event */\n    onglobalmousemove: FederatedEventHandler | null;\n    /** Handler for 'mouseout' event */\n    onmouseout: FederatedEventHandler | null;\n    /** Handler for 'mouseover' event */\n    onmouseover: FederatedEventHandler | null;\n    /** Handler for 'mouseup' event */\n    onmouseup: FederatedEventHandler | null;\n    /** Handler for 'mouseupoutside' event */\n    onmouseupoutside: FederatedEventHandler | null;\n    /** Handler for 'pointercancel' event */\n    onpointercancel: FederatedEventHandler | null;\n    /** Handler for 'pointerdown' event */\n    onpointerdown: FederatedEventHandler | null;\n    /** Handler for 'pointerenter' event */\n    onpointerenter: FederatedEventHandler | null;\n    /** Handler for 'pointerleave' event */\n    onpointerleave: FederatedEventHandler | null;\n    /** Handler for 'pointermove' event */\n    onpointermove: FederatedEventHandler | null;\n    /** Handler for 'globalpointermove' event */\n    onglobalpointermove: FederatedEventHandler | null;\n    /** Handler for 'pointerout' event */\n    onpointerout: FederatedEventHandler | null;\n    /** Handler for 'pointerover' event */\n    onpointerover: FederatedEventHandler | null;\n    /** Handler for 'pointertap' event */\n    onpointertap: FederatedEventHandler | null;\n    /** Handler for 'pointerup' event */\n    onpointerup: FederatedEventHandler | null;\n    /** Handler for 'pointerupoutside' event */\n    onpointerupoutside: FederatedEventHandler | null;\n    /** Handler for 'rightclick' event */\n    onrightclick: FederatedEventHandler | null;\n    /** Handler for 'rightdown' event */\n    onrightdown: FederatedEventHandler | null;\n    /** Handler for 'rightup' event */\n    onrightup: FederatedEventHandler | null;\n    /** Handler for 'rightupoutside' event */\n    onrightupoutside: FederatedEventHandler | null;\n    /** Handler for 'tap' event */\n    ontap: FederatedEventHandler | null;\n    /** Handler for 'touchcancel' event */\n    ontouchcancel: FederatedEventHandler | null;\n    /** Handler for 'touchend' event */\n    ontouchend: FederatedEventHandler | null;\n    /** Handler for 'touchendoutside' event */\n    ontouchendoutside: FederatedEventHandler | null;\n    /** Handler for 'touchmove' event */\n    ontouchmove: FederatedEventHandler | null;\n    /** Handler for 'globaltouchmove' event */\n    onglobaltouchmove: FederatedEventHandler | null;\n    /** Handler for 'touchstart' event */\n    ontouchstart: FederatedEventHandler | null;\n    /** Handler for 'wheel' event */\n    onwheel: FederatedEventHandler<FederatedWheelEvent> | null;\n}\n\ntype AddListenerOptions = boolean | AddEventListenerOptions;\ntype RemoveListenerOptions = boolean | EventListenerOptions;\n\nexport interface IFederatedDisplayObject\n    extends Omit<FederatedEventTarget, 'parent' | 'children' | keyof utils.EventEmitter | 'cursor'>\n{\n    addEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: AddListenerOptions\n    ): void;\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    ): void;\n    removeEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: RemoveListenerOptions\n    ): void;\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    ): void;\n}\n\nfunction convertEventModeToInteractiveMode(mode: EventMode): boolean\n{\n    return mode === 'dynamic' || mode === 'static';\n}\n\nexport const FederatedDisplayObject: IFederatedDisplayObject = {\n\n    /**\n     * Property-based event handler for the `click` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onclick = (event) => {\n     *  //some function here that happens on click\n     * }\n     */\n    onclick: null,\n\n    /**\n     * Property-based event handler for the `mousedown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmousedown = (event) => {\n     *  //some function here that happens on mousedown\n     * }\n     */\n    onmousedown: null,\n\n    /**\n     * Property-based event handler for the `mouseenter` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseenter = (event) => {\n     *  //some function here that happens on mouseenter\n     * }\n     */\n    onmouseenter: null,\n\n    /**\n     * Property-based event handler for the `mouseleave` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseleave = (event) => {\n     *  //some function here that happens on mouseleave\n     * }\n     */\n    onmouseleave: null,\n\n    /**\n     * Property-based event handler for the `mousemove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmousemove = (event) => {\n     *  //some function here that happens on mousemove\n     * }\n     */\n    onmousemove: null,\n\n    /**\n     * Property-based event handler for the `globalmousemove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobalmousemove = (event) => {\n     *  //some function here that happens on globalmousemove\n     * }\n     */\n    onglobalmousemove: null,\n\n    /**\n     * Property-based event handler for the `mouseout` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseout = (event) => {\n     *  //some function here that happens on mouseout\n     * }\n     */\n    onmouseout: null,\n\n    /**\n     * Property-based event handler for the `mouseover` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseover = (event) => {\n     *  //some function here that happens on mouseover\n     * }\n     */\n    onmouseover:  null,\n\n    /**\n     * Property-based event handler for the `mouseup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseup = (event) => {\n     *  //some function here that happens on mouseup\n     * }\n     */\n    onmouseup:  null,\n\n    /**\n     * Property-based event handler for the `mouseupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseupoutside = (event) => {\n     *  //some function here that happens on mouseupoutside\n     * }\n     */\n    onmouseupoutside:  null,\n\n    /**\n     * Property-based event handler for the `pointercancel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointercancel = (event) => {\n     *  //some function here that happens on pointercancel\n     * }\n     */\n    onpointercancel:  null,\n\n    /**\n     * Property-based event handler for the `pointerdown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerdown = (event) => {\n     *  //some function here that happens on pointerdown\n     * }\n     */\n    onpointerdown:  null,\n\n    /**\n     * Property-based event handler for the `pointerenter` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerenter = (event) => {\n     *  //some function here that happens on pointerenter\n     * }\n     */\n    onpointerenter:  null,\n\n    /**\n     * Property-based event handler for the `pointerleave` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerleave = (event) => {\n     *  //some function here that happens on pointerleave\n     * }\n     */\n    onpointerleave:  null,\n\n    /**\n     * Property-based event handler for the `pointermove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointermove = (event) => {\n     *  //some function here that happens on pointermove\n     * }\n     */\n    onpointermove:  null,\n\n    /**\n     * Property-based event handler for the `globalpointermove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobalpointermove = (event) => {\n     *  //some function here that happens on globalpointermove\n     * }\n     */\n    onglobalpointermove:  null,\n\n    /**\n     * Property-based event handler for the `pointerout` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerout = (event) => {\n     *  //some function here that happens on pointerout\n     * }\n     */\n    onpointerout:  null,\n\n    /**\n     * Property-based event handler for the `pointerover` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerover = (event) => {\n     *  //some function here that happens on pointerover\n     * }\n     */\n    onpointerover:  null,\n\n    /**\n     * Property-based event handler for the `pointertap` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointertap = (event) => {\n     *  //some function here that happens on pointertap\n     * }\n     */\n    onpointertap:  null,\n\n    /**\n     * Property-based event handler for the `pointerup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerup = (event) => {\n     *  //some function here that happens on pointerup\n     * }\n     */\n    onpointerup:  null,\n\n    /**\n     * Property-based event handler for the `pointerupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerupoutside = (event) => {\n     *  //some function here that happens on pointerupoutside\n     * }\n     */\n    onpointerupoutside:  null,\n\n    /**\n     * Property-based event handler for the `rightclick` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightclick = (event) => {\n     *  //some function here that happens on rightclick\n     * }\n     */\n    onrightclick:  null,\n\n    /**\n     * Property-based event handler for the `rightdown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightdown = (event) => {\n     *  //some function here that happens on rightdown\n     * }\n     */\n    onrightdown:  null,\n\n    /**\n     * Property-based event handler for the `rightup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightup = (event) => {\n     *  //some function here that happens on rightup\n     * }\n     */\n    onrightup:  null,\n\n    /**\n     * Property-based event handler for the `rightupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightupoutside = (event) => {\n     *  //some function here that happens on rightupoutside\n     * }\n     */\n    onrightupoutside:  null,\n\n    /**\n     * Property-based event handler for the `tap` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontap = (event) => {\n     *  //some function here that happens on tap\n     * }\n     */\n    ontap:  null,\n\n    /**\n     * Property-based event handler for the `touchcancel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchcancel = (event) => {\n     *  //some function here that happens on touchcancel\n     * }\n     */\n    ontouchcancel:  null,\n\n    /**\n     * Property-based event handler for the `touchend` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchend = (event) => {\n     *  //some function here that happens on touchend\n     * }\n     */\n    ontouchend:  null,\n\n    /**\n     * Property-based event handler for the `touchendoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchendoutside = (event) => {\n     *  //some function here that happens on touchendoutside\n     * }\n     */\n    ontouchendoutside:  null,\n\n    /**\n     * Property-based event handler for the `touchmove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchmove = (event) => {\n     *  //some function here that happens on touchmove\n     * }\n     */\n    ontouchmove:  null,\n\n    /**\n     * Property-based event handler for the `globaltouchmove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobaltouchmove = (event) => {\n     *  //some function here that happens on globaltouchmove\n     * }\n     */\n    onglobaltouchmove:  null,\n\n    /**\n     * Property-based event handler for the `touchstart` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchstart = (event) => {\n     *  //some function here that happens on touchstart\n     * }\n     */\n    ontouchstart:  null,\n\n    /**\n     * Property-based event handler for the `wheel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onwheel = (event) => {\n     *  //some function here that happens on wheel\n     * }\n     */\n    onwheel:  null,\n    /**\n     * @ignore\n     */\n    _internalInteractive: undefined,\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n     * @memberof PIXI.DisplayObject#\n     */\n    get interactive()\n    {\n        return this._internalInteractive ?? convertEventModeToInteractiveMode(EventSystem.defaultEventMode);\n    },\n    set interactive(value: boolean)\n    {\n        if (process.env.DEBUG)\n        {\n            utils.deprecation(\n                '7.2.0',\n                // eslint-disable-next-line max-len\n                `Setting interactive is deprecated, use eventMode = 'none'/'passive'/'auto'/'static'/'dynamic' instead.`\n            );\n        }\n\n        this._internalInteractive = value;\n        this.eventMode = value ? 'static' : 'auto';\n    },\n    /**\n     * @ignore\n     */\n    _internalEventMode: undefined,\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse.\n     * This now replaces the `interactive` property.\n     * There are 5 types of interaction settings:\n     * - `'none'`: Ignores all interaction events, even on its children.\n     * - `'passive'`: Does not emit events and ignores all hit testing on itself and non-interactive children.\n     * Interactive children will still emit events.\n     * - `'auto'`: Does not emit events but is hit tested if parent is interactive. Same as `interactive = false` in v7\n     * - `'static'`: Emit events and is hit tested. Same as `interaction = true` in v7\n     * - `'dynamic'`: Emits events and is hit tested but will also receive mock interaction events fired from a ticker to\n     * allow for interaction when the mouse isn't moving\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.eventMode = 'static';\n     * sprite.on('tap', (event) => {\n     *     // Handle event\n     * });\n     * @memberof PIXI.DisplayObject#\n     * @since 7.2.0\n     */\n    get eventMode()\n    {\n        return this._internalEventMode ?? EventSystem.defaultEventMode;\n    },\n    set eventMode(value)\n    {\n        this._internalInteractive = convertEventModeToInteractiveMode(value);\n        this._internalEventMode = value;\n    },\n\n    /**\n     * Determines if the displayObject is interactive or not\n     * @returns {boolean} Whether the displayObject is interactive or not\n     * @memberof PIXI.DisplayObject#\n     * @since 7.2.0\n     * @example\n     * import { Sprite } from 'pixi.js';\n     * const sprite = new Sprite(texture);\n     * sprite.eventMode = 'static';\n     * sprite.isInteractive(); // true\n     *\n     * sprite.eventMode = 'dynamic';\n     * sprite.isInteractive(); // true\n     *\n     * sprite.eventMode = 'none';\n     * sprite.isInteractive(); // false\n     *\n     * sprite.eventMode = 'passive';\n     * sprite.isInteractive(); // false\n     *\n     * sprite.eventMode = 'auto';\n     * sprite.isInteractive(); // false\n     */\n    isInteractive()\n    {\n        return this.eventMode === 'static' || this.eventMode === 'dynamic';\n    },\n\n    /**\n     * Determines if the children to the displayObject can be clicked/touched\n     * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n     * @memberof PIXI.Container#\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n     * @example\n     * import { Rectangle, Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.hitArea = new Rectangle(0, 0, 100, 100);\n     * @member {PIXI.IHitArea}\n     * @memberof PIXI.DisplayObject#\n     */\n    hitArea: null,\n\n    /**\n     * Unlike `on` or `addListener` which are methods from EventEmitter, `addEventListener`\n     * seeks to be compatible with the DOM's `addEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event to listen to.\n     * @param listener - The listener callback or object.\n     * @param options - Listener options, used for capture phase.\n     * @example\n     * // Tell the user whether they did a single, double, triple, or nth click.\n     * button.addEventListener('click', {\n     *     handleEvent(e): {\n     *         let prefix;\n     *\n     *         switch (e.detail) {\n     *             case 1: prefix = 'single'; break;\n     *             case 2: prefix = 'double'; break;\n     *             case 3: prefix = 'triple'; break;\n     *             default: prefix = e.detail + 'th'; break;\n     *         }\n     *\n     *         console.log('That was a ' + prefix + 'click');\n     *     }\n     * });\n     *\n     * // But skip the first click!\n     * button.parent.addEventListener('click', function blockClickOnce(e) {\n     *     e.stopImmediatePropagation();\n     *     button.parent.removeEventListener('click', blockClickOnce, true);\n     * }, {\n     *     capture: true,\n     * });\n     */\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const signal = typeof options === 'object' ? options.signal : undefined;\n        const once = typeof options === 'object' ? (options.once === true) : false;\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        const listenerFn = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        const emitter = (this as unknown as utils.EventEmitter);\n\n        if (signal)\n        {\n            signal.addEventListener('abort', () =>\n            {\n                emitter.off(type, listenerFn, context);\n            });\n        }\n\n        if (once)\n        {\n            emitter.once(type, listenerFn, context);\n        }\n        else\n        {\n            emitter.on(type, listenerFn, context);\n        }\n    },\n\n    /**\n     * Unlike `off` or `removeListener` which are methods from EventEmitter, `removeEventListener`\n     * seeks to be compatible with the DOM's `removeEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event the listener is bound to.\n     * @param listener - The listener callback or object.\n     * @param options - The original listener options. This is required to deregister a capture phase listener.\n     */\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).off(type, listener, context);\n    },\n\n    /**\n     * Dispatch the event on this {@link PIXI.DisplayObject} using the event's {@link PIXI.EventBoundary}.\n     *\n     * The target of the event is set to `this` and the `defaultPrevented` flag is cleared before dispatch.\n     *\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param e - The event to dispatch.\n     * @returns Whether the {@link PIXI.FederatedEvent.preventDefault preventDefault}() method was not invoked.\n     * @example\n     * // Reuse a click event!\n     * button.dispatchEvent(clickEvent);\n     */\n    dispatchEvent(e: Event): boolean\n    {\n        if (!(e instanceof FederatedEvent))\n        {\n            throw new Error('DisplayObject cannot propagate events outside of the Federated Events API');\n        }\n\n        e.defaultPrevented = false;\n        e.path = null;\n        e.target = this as unknown as FederatedEventTarget;\n        e.manager.dispatchEvent(e);\n\n        return !e.defaultPrevented;\n    }\n};\n\nDisplayObject.mixin(FederatedDisplayObject);\n"],
  "mappings": "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",
  "names": ["_EventSystem", "nativeEvent"]
}
